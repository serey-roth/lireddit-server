input PostInput {
    title: String!
    text: String!
}

type Post {
    id: Int!
    createdAt: String!
    updatedAt: String!
    title: String!
    creatorId: Int!
    creator: User!
    text: String!
    points: Int!
    textSnippet: String!
}

type PaginatedPosts {
    posts: [Post!]!
    hasMore: Boolean!
}

input UsernamePasswordInput {
    username: String!
    password: String!
    email: String!
}

type FieldError {
    field: String!
    message: String!
}

type UserResponse {
    errors: [FieldError]
    user: User
}

type User  {
    id: Int!
    createdAt: String!
    updatedAt: String!
    username: String!
    password: String!
    email: String!
    posts: [Post!]
}

type Query {
    me: User
    posts(limit: Int!, cursor: String): PaginatedPosts
    post(id: Int!): Post
}

type Mutation {
    changePassword(token: String, newPassword: String!): UserResponse!
    forgetPassword(email: String!): Boolean!
    login(usernameOrEmail: String!, password: String!): UserResponse!
    register(options: UsernamePasswordInput!): UserResponse!
    logout: Boolean!
    createPost(input: PostInput): Post!
    updatePost(id: Int!, title: String): Post
    deletePost(id: Int!): Boolean!
    vote(postId: Int!, value: Int!): Boolean!
}